<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC '-//ibatis.apache.org//DTD Sql Map 2.0//EN' 'http://ibatis.apache.org/dtd/sql-map-2.dtd'>
<sqlMap namespace="erpEmp">

	<resultMap id="userDtoMap" class="login.user.bean.UserInfoDataDTO">
         <result property="id" column="id" />
         <result property="pw" column="pw" nullValue="1234"/>
         <result property="name" column="name" nullValue="none"/>
         <result property="birth" column="birth" nullValue="170606"/>
         <result property="phone" column="phone" nullValue="010-0000-0000"/>
         <result property="address" column="address" nullValue="none"/>
         <result property="email" column="email" nullValue="none"/>
         <result property="googleId" column="googleId" nullValue="none"/>
    </resultMap>

	
<!-- 알바생 관리 하는 부분 -->
	
	<!-- 알바생이 사장님 관리페이지를 들어갔을때 세션을 받아오기 -->
	<select id="getEidBkey" resultClass="franchiseeDto" parameterClass="String">
		select b.b_key, a.b_id, a.b_name,b.e_id from franchiseeInfo a INNER JOIN (select e_id, e_bossid, b_key from employeeInfo where e_id = #id#) b ON a.b_key = b.b_key;
	</select>
	
	<!-- 알바생신청 로그의 제일 마지막 번호를 불러온다. 신청 폼의 신청 번호 -->
	<select id="getEmployeeAddLogLastNum" resultClass="beDto">
		select num, (select count(*) FROM employeeInfo WHERE e_bossid = #e_bossid#) AS count from employeeAddLog order by num desc limit 0, 1;
	</select>
	
	<!-- 사장님이 알바원하는 인원수만큼 신청(삭제도가능) -->
	<insert id="insertEmployeeAddLog" parameterClass="beDto">
		INSERT INTO employeeAddLog (num, result, b_id, applyCount, applyTime, content,b_key)
							 VALUES(0, 0, #b_id#, #applyCount#, now(), #content#,#b_key#);
	</insert>
	
	<!-- 알바생 정보테이블에서 사장님이 보유한 알바생아이디를 찾고, 갯수를 센다. -->
	<select id="getEmployeeId" resultClass="beDto" parameterClass="String">
		SELECT substring(e_id, 9,11)+0 as e_id,(select count(*) FROM employeeInfo WHERE e_bossid = #b_id#) +1 AS count FROM employeeInfo WHERE e_bossid = #b_id# ORDER BY e_id DESC LIMIT 1; 
	</select>	
	
	<!-- 알바생 정보테이블에서 사장님이 보유한 알바생아이디를 찾고, 갯수를 센다. -->
	<select id="getEmployeeAddLog" resultClass="beDto" parameterClass="java.util.HashMap" >
		SELECT * from  employeeAddLog where result = '0' and b_key = #b_key#;
	</select>		
	<!-- 알바생 정보테이블에서 사장님이 보유한 알바생아이디를 찾고, 갯수를 센다. -->
	<select id="getEmployeeAddLogCount" resultClass="int" parameterClass="java.util.HashMap" >
		SELECT count(*) from  employeeAddLog where result = '0' and b_key = #b_key#;
	</select>
	
	<!-- 알바생아이디를 생성하고자할때, 아이디가 중간에없는 아이디를 찾는다. -->
	<select id="findE_idNull" resultClass="String" parameterClass="String">
		select e_id from employeeInfo where e_id = #e_id#;
	</select>
	
	<!-- 알바생 아이디를 회원테이블 생성 -->
	<insert id="insertEmployeeIdUserInfo" parameterClass="String">
		INSERT INTO userInfo (id, pw, grade, signdate) VALUES(#e_id#, 1234, 2, now());
	</insert>
	
	<!-- 알바생 아이디를  알바생정보테이블에 생성 -->
	<insert id="insertEmployeeIdEmployeeInfo" parameterClass="java.util.HashMap">
		INSERT INTO employeeInfo (e_id, e_bossid,b_key) VALUES(#e_id#, #e_bossid#,#b_key#);
	</insert>		
	
	<!-- 아이디 신청한 수만큼 아이디 생성이 완료되면, 아이디 신청 컨펌 정보를 업데이트한다. -->
	<update	id="updateEmployeeAddLog" parameterClass="String">
		update employeeAddLog set result = 1, confirmTime = now(), e_id = #id#; 
	</update>

	
	<!-- 알바생 리스트 -->
	<select id="getEmployeeList" resultClass="beDto" parameterClass="java.util.HashMap">
		select e_id, pw,num, name, b_key AS e_name from userInfo a INNER JOIN 
		(select e_id,num,b_key from employeeInfo where e_bossid = #id# and b_key = #b_key#) b on a.id = b.e_id;
	</select>
	
<!-- ▲▼ 처리 구문 ======================== -->
	<!-- 새로운 공간을 만들어준다 -->
	<select id="getListNum" resultClass="int" parameterClass="String">
		select num from employeeInfo where e_bossid = #b_id#;
	</select>
	
	<!-- 앞번호에 space를 넣어준다. space = 9999 -->
	<update id="changeSpace" parameterClass="java.util.HashMap">
		update employeeInfo set num = #space# where num = #numb#;
	</update>
	
	<!-- 앞번호에 변경될 수를 넣어준다. -->
	<update id="changeBefore" parameterClass="java.util.HashMap">
		update employeeInfo set num = #numb# where num = #numa#;
	</update>
	
	<!-- 뒷번호에 변경될 수를 넣어준다. -->
	<update id="changeAfter" parameterClass="java.util.HashMap">
		update employeeInfo set num = #numa# where num = #space#;
	</update>	
<!-- 끝  -->
	
	<!-- 알바생 아이디로 정보를 볼러옴 AJAX-->
	<select id="getEmployeeInfo" resultClass="userDto" parameterClass="String">
		select * from userInfo where id = #id#;
	</select>	
	
	<!-- 알바생 아이디로 회원정보를 볼러옴 AJAX-->
	<select id="getEmployeeUpdateInfo" resultClass="userDto" parameterClass="String">
		select * from userInfo where id = #id#;
	</select>
	
	<!-- 삭제할 알바생 아이디를 찾는다.-->
	<select id="getDeleteIdInfo" resultClass="beDto" parameterClass="int">
		select e_id,b_key from employeeInfo where num = #num#;
	</select>
	
	<!-- 알바생 아이디 삭제 신청 Log 중 마지막 번호를 출력 -->
	<select id="getDeleteLogLastNum" resultClass="int">
		SELECT num from employeeDeleteLog order by num desc limit 0, 1; 
	</select>	
	
	<!-- 알바생의 아이디를 삭제 신청함.-->
	<insert id="deleteIdLogAdd" >
		insert into employeeDeleteLog (num, result, b_id, e_id, applyTime, content)
			 VALUES(0, 0, #b_id#, #e_id#, now(), #content#);  
	</insert>
	
	<!-- 알바생아이디 삭제 리스트 -->
	<select id="getEmployeeDeleteList" resultClass="beDto" parameterClass="java.util.HashMap" >
		SELECT * from  employeeDeleteLog where result = '0';
	</select>	
	
	<select id="getEmployeeDeleteListCount" resultClass="int" parameterClass="java.util.HashMap" >
		SELECT count(*) from  employeeDeleteLog where result = '0';
	</select>		
	
	<!-- 알바생의 아이디를 삭제 확인 - 관리자.-->
	<update id="deleteIdLogAddConfirm" parameterClass="String" >
		update employeeDeleteLog set result = 1, confirmTime = now() where e_id = #e_id#;
	</update>	
	
	<!-- 알바생의 아이디를 삭제 삭제1 - employeeInfo.-->
	<delete id="deleteEidEmployeeInfo" parameterClass="String" >
		delete from employeeInfo where e_id = #e_id#;
	</delete>	
	
	<!-- 알바생의 아이디를 삭제 삭제2 - userInfo.-->
	<delete id="deleteEidUserInfo" parameterClass="String" >
		delete from userInfo where id = #e_id#;
	</delete>

<!-- 신상관리========================================================== -->
	<!-- 신상관리 알바생 이름 리스트 -->
	<select id="getEmployeeIdList" resultClass="userDto" parameterClass="String">
		select id, pw, name, birth, phone, grade, address, email, signdate, googleid 
		from userInfo a inner Join(select e_id from employeeInfo where b_key = #b_key#) b 
		on a.id = b.e_id;;
	</select>

	<!-- 알바생 아이디 정보 보기 -->
	<select id="getEmplyeeInfo" resultClass="userDto" parameterClass="String">
		select * from userInfo where id = #id#;
	</select>

	<!-- 알바생 아이디로 정보 수정-->
	<update id="updateEmployeeId"  parameterClass="userDto">
		UPDATE userInfo SET 
			pw = #pw#,
			name = #name#,
			birth = #birth#,
			phone = #phone#,
			email = #email#,
			address = #address#
		WHERE id = #id#;
	</update>	

	<!-- 알바생 접속 LOG 찾기 -->
	<select id="findLoginLogLogoutNull"  parameterClass="String">
		SELECT count(*) from useTimeLog WHERE id = #id# ORDER BY loginTime desc;
	</select>

	<!-- 알바생 접속 LOG 추가 -->
	<insert id="insertEmployeeLoginLog" parameterClass="java.util.HashMap">
		INSERT INTO useTimeLog (id, loginTime, ip) VALUES(#id#, now(), #ip#);
	</insert>
	
	<!-- 알바생 접속해제 LOG 변경 -->
	<update id="updateEmployeeLogoutLog" parameterClass="String">
		update useTimeLog set logoutTime = now() where id = #id# order by loginTime desc limit 1
	</update>

	<!-- 알바생 접속 LOG LIST Count -->
	<select id="getEmployeeLoginLogoutLogListCount" resultClass="int" parameterClass="String">
		select count(*) from useTimeLog u,(select e_id from employeeInfo where e_bossid = #id#) e where u.id = e.e_id ORDER BY logoutTime desc;
	</select>	

	<!-- 알바생 접속 LOG LIST  -->
	<select id="getEmployeeLoginLogoutLogList" resultClass="useTimeDto" parameterClass="java.util.HashMap">
		<![CDATA[
			select id, loginTime, logoutTime, ip, r from 
			(select id, loginTime, logoutTime, ip, @rownum:=@rownum + 1 as r from
			(select u.id, u.loginTime, u.logoutTime, u.ip from useTimeLog u,
			(select e_id from employeeInfo where e_bossid = #id#) e 
			where u.id = e.e_id ORDER BY logoutTime desc) b, (select @rownum:=0) TMP) c	
			where r >= #startRow# and r <= #endRow# ;
		]]>
	</select>	

<!-- Calender ==================================================== -->
	<!-- 알바생 근무 일정 추가 -->
	<insert id="calenderInsertTime" parameterClass="beDto">
	 INSERT INTO employeeWorkTime( b_key, todayDate, title, start, end)
	  VALUES( #b_key#, now(), #id#, #startTime#, #endTime#);
	</insert>
	
	<!-- 알바생 근무 일정 리스트 를 뽑기 위해 사장님아이디 검색 -->
	<select id="getEidBid" resultClass="String" parameterClass="String">
		select e_bossid from employeeInfo where e_id = #id#;
	</select>
	
	<!-- 알바생 근무 일정 리스트를 달력에 뽑아냄 -->
	<select id="getCalenderWorkTimeList" resultClass="workTimeListDTO" parameterClass="String">
		select a.num, a.title, DATE_FORMAT(a.start, '%Y-%m-%d %H:%i:%s') as start, DATE_FORMAT(a.end, '%Y-%m-%d %H:%i:%s') as end from employeeWorkTime a INNER JOIN 
		(select e_id from employeeInfo where e_bossid = #id#) b ON a.title = b.e_id;
	</select>
	
	<!-- 알바생 근무 일정 변경 log : eventDropLog -->
	<insert id="calenderUpdateTimeLog" parameterClass="java.util.HashMap">
	 INSERT INTO employeeWorkTimeUpdateLog ( b_key, title, planStart, planEnd, start, end, updateDate)
	  VALUES( #b_key#, #e_id#, #dragPlanStart#, #dragPlanEnd#, #start#, #end#, now());
	</insert>
	
	<!-- 알바생 근무 일정 변경 : eventDrop -->
	<update id="calenderUpdateTime" parameterClass="java.util.HashMap">
	 UPDATE employeeWorkTime SET start = #start#, end = #end# WHERE title = #e_id# and start = #dragPlanStart# and end = #dragPlanEnd#;
	</update>
	
	<!-- 알바생 근무 일정 삭제 log :eventInfo -->
	<insert id="calenderDeleteTimeLog" parameterClass="java.util.HashMap">
	INSERT INTO employeeWorkTimeDeleteLog (b_key, title, start, end, deleteDate) 	
									VALUES(#b_key#, #e_id#, #dragPlanStart#, #dragPlanEnd#, now());
	</insert>

	<!-- 알바생 근무 일정 삭제 :eventInfo -->
	<delete id="calenderDeleteTime" parameterClass="java.util.HashMap">
		DELETE FROM employeeWorkTime WHERE title = #e_id# and start = #dragPlanStart# and end = #dragPlanEnd#;
	</delete>	
	
	<!-- 알바 출근 유효성 검사 -->
	<select id="employeeCommuteCheck" resultClass="workTimeDto" parameterClass="String">
	 	<![CDATA[
	 	select * from employeeWorkTime 
	 	where title = #e_id# and date_add(start, interval - 10 minute) <= now() and date_add(end, interval + 10 minute)  >= now();
	 	]]>
	</select>
	
	<!-- 알바 출근 상태로 변경 -->
	<update id="updateEmployeeCommute" parameterClass="String">
	 	<![CDATA[	
	 	update employeeWorkTime set result = 1
	 	where title = #e_id# and date_add(start, interval - 10 minute) <= now() and date_add(end, interval + 10 minute) >= now();
	 	]]>	 	
	</update>	
	
	<!-- 알바 출근 상태로 출근시간 찍기 -->
	<insert id="insertEmployeeCommute" parameterClass="workTimeDto">
		INSERT INTO employeeWorkTimeCommute (num, result, commuteTime, ex)
					VALUES(#num#, '1', now(), '1970-01-01 00:00:00');
	</insert>	
	
	<!-- 알바 출근 상태로 출근시간 찍기 : 메세지 VIEW 출력 -->
	<select id="getCommute" resultClass="workTimeDto" parameterClass="workTimeDto">
		select commuteTime from employeeWorkTimeCommute where num = #num# ;
	</select>	

	<!-- 알바 퇴근 유효성 검사 -->
	<select id="employeeOffWorkCheck" resultClass="workTimeDto" parameterClass="String">
	 	<![CDATA[
	 	select * from employeeWorkTime 
	 	where title = #e_id# and date_add(start, interval - 10 minute) <= now() and date_add(end, interval + 3 hour)  >= now();
	 	]]>
	</select>
	
	<!-- 알바 퇴근 상태로 퇴근시간 찍기 -->
	<update id="updateEmployeeOffWork" parameterClass="workTimeDto">
		UPDATE employeeWorkTimeCommute SET 
			result = '2',
			offWorkTime = if(now() > #end#, #end#, now()),
			ex = if(now() > #end#, now() - #end#, now()) 
		WHERE num = #num#;  
	</update>
	
	<!-- 알바 퇴근 상태로 변경 -->
	<update id="updateEmployeeOffWork2" parameterClass="String">
	 	<![CDATA[	
	 	update employeeWorkTime set result = 2
	 	where title = #e_id# and date_add(start, interval - 10 minute) <= now() and date_add(end, interval + 3 hour) >= now();
	 	]]>	 	
	</update>	
	
	<!-- 회원 등급 체크 -->
	<select id="getUserGrade" resultClass="int" parameterClass="String">
		 select grade from userInfo where id = #id#;
	</select>
	
	<!-- 알바 근태 리스트 -->
	<select id="getEmployeeWorkTimeList" resultClass="workTimeDto" parameterClass="String">
		select c.num, c.b_key, c.todayDate, c.title, c.start, c.end, c.result, c.color, c.commuteTime, c.offWorkTime, c.ex from employeeInfo a 
			 INNER JOIN	(select a.num, a.b_key, a.todayDate, a.title, a.start, a.end, a.result, a.color, b.commuteTime, b.offWorkTime, b.ex from employeeWorkTime a INNER JOIN employeeWorkTimeCommute b ON a.num = b.num WHERE a.result = 2) c 
		ON a.e_id = c.title WHERE a.e_bossid = #id#;
	</select>	
	
	
	<!-- 사장님 총 통계 -->
	
	<!-- 사장님  알바생 일한 시간 계산 -->
	<select id="employeeWorkCount" resultClass="bossErpTotalDTO" parameterClass="java.util.HashMap">
		<![CDATA[
		select (case when id = 1 then 'hello' else id end) as id,
		date_format(loginTime, "%Y-%m-%d") AS loginTime, sum(round(logoutTime - loginTime)) as count 
		from useTimeLog as a INNER JOIN employeeInfo as b ON a.id = b.e_id 
		where loginTime >= #minDate# and loginTime <= #maxDate#
		group by id with rollup;
		]]>
	</select>
	
	<!-- 사장님의 가맹점 리스트 반환 , 1군데서 사용-->
	<select id="getBossFranchiseeList" resultClass="franchiseeDTO" parameterClass="String">
		select b_name, b_key from franchiseeInfo where b_id = #b_id#;
	</select>
	
</sqlMap>
	